{"version":3,"file":"static/js/312.e208740e.chunk.js","mappings":"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","sources":["api/movie.js","components/SearchMovie/SearchMovie.jsx","pages/MoviesPage/MoviesPage.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n});\n\nconst API_KEY = 'c26eca08a64a6a03a8df2e5238182fb9';\nconst BEARER_TOKEN =\n  'eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJjMjZlY2EwOGE2NGE2YTAzYThkZjJlNTIzODE4MmZiOSIsInN1YiI6IjY1ZDhjODA5YTI4NGViMDE2Mjg3ZTU5OSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.ts9EjcunI1qs_Yb1bgAlRZi5af6C2r92M3HBC_X1lGk';\n\nexport const getTrendingMovies = () => {\n  return instance.get('/trending/movie/day', {\n    headers: {\n      Authorization: `Bearer ${BEARER_TOKEN}`,\n    },\n  });\n};\n\nexport const getMovieByQuery = query => {\n  const options = {\n    headers: {\n      Authorization: `Bearer ${BEARER_TOKEN}`,\n    },\n    params: {\n      query: query,\n    },\n  };\n  return instance.get('/search/movie', options);\n};\n\nexport const getMovieById = movie_id => {\n  return instance.get(\n    `/movie/${movie_id}`,\n    {\n      params: {\n        api_key: API_KEY,\n      },\n    },\n    {\n      headers: {\n        Authorization: `Bearer ${BEARER_TOKEN}`,\n      },\n    }\n  );\n};\n\nexport const getCastById = movie_id => {\n  return instance.get(\n    `/movie/${movie_id}/credits`,\n    {\n      params: {\n        api_key: API_KEY,\n      },\n    },\n    {\n      headers: {\n        Authorization: `Bearer ${BEARER_TOKEN}`,\n      },\n    }\n  );\n};\n\nexport const getReviewsById = movie_id => {\n  return instance.get(\n    `/movie/${movie_id}/reviews`,\n    {\n      params: {\n        api_key: API_KEY,\n      },\n    },\n    {\n      headers: {\n        Authorization: `Bearer ${BEARER_TOKEN}`,\n      },\n    }\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { Link, useSearchParams, useLocation } from 'react-router-dom';\nimport { getMovieByQuery } from 'api/movie';\n\nconst SearchMovie = () => {\n  const [movies, setMovies] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [errorMsg, setError] = useState(null);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [value, setValue] = useState(searchParams.get('query') || '');\n  const location = useLocation();\n\n  useEffect(() => {\n    const query = searchParams.get('query');\n\n    const fetchMoviesByQuery = async query => {\n      try {\n        setLoading(true);\n        const response = await getMovieByQuery(query);\n        if (response.data.results.length === 0) {\n          setValue('');\n          return alert('No movies found for your query.');\n        }\n        setMovies(response.data.results);\n      } catch (error) {\n        setError(error.message);\n        console.error('Error fetching data:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    if (query) {\n      fetchMoviesByQuery(query);\n    }\n  }, [searchParams]);\n\n  const onFormSubmit = async e => {\n    e.preventDefault();\n\n    if (!value) {\n      return alert(\"Sorry, but we can't find an empty query\");\n    }\n\n    try {\n      setLoading(true);\n      setSearchParams({ query: value });\n      await getMovieByQuery(value);\n    } catch (error) {\n      setError(errorMsg.message);\n      console.error('Error fetching data:', error);\n    } finally {\n      setLoading(false);\n    }\n\n    searchParams.set('query :', value);\n  };\n\n  return (\n    <>\n      <form onSubmit={onFormSubmit}>\n        <input\n          type=\"text\"\n          value={value}\n          onChange={e => setValue(e.target.value)}\n        />\n        <button type=\"submit\">Search</button>\n      </form>\n      {loading && <p>Loading...</p>}\n      <ul>\n        {movies.map(({ id, title }) => (\n          <li key={id}>\n            <Link to={`/movies/${id}`} state={{ from: location }}>\n              {title}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n\nexport default SearchMovie;\n","import SearchMovie from 'components/SearchMovie/SearchMovie';\n\nconst MoviesPage = () => {\n  return (\n    <div>\n      <SearchMovie />\n    </div>\n  );\n};\n\nexport default MoviesPage;\n"],"names":["instance","axios","baseURL","API_KEY","BEARER_TOKEN","getTrendingMovies","get","headers","Authorization","concat","getMovieByQuery","query","options","params","getMovieById","movie_id","api_key","getCastById","getReviewsById","_useState","useState","_useState2","_slicedToArray","movies","setMovies","_useState3","_useState4","loading","setLoading","_useState5","_useState6","errorMsg","setError","_useSearchParams","useSearchParams","_useSearchParams2","searchParams","setSearchParams","_useState7","_useState8","value","setValue","location","useLocation","useEffect","fetchMoviesByQuery","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","response","_context","prev","next","sent","data","results","length","abrupt","alert","t0","message","console","error","finish","stop","_x","apply","arguments","onFormSubmit","_ref2","_callee2","e","_context2","preventDefault","set","_x2","_jsxs","_Fragment","children","onSubmit","_jsx","type","onChange","target","map","_ref3","id","title","Link","to","state","from","SearchMovie"],"sourceRoot":""}